<%= disclaimer() %>
package <%= ns %>;

import elemental2.dom.HTMLElement;
import elemental2.dom.Element;
import com.google.gwt.core.client.JavaScriptObject;
import elemental2.core.JsArray;
import jsinterop.annotations.JsOverlay;
import jsinterop.annotations.JsPackage;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;
import com.vaadin.polymer.PolymerElement;
import com.vaadin.polymer.PolymerFunction;

/**
 * <%= getDescription(' ') %>
 */
@JsType(isNative=true, namespace = JsPackage.GLOBAL, name = "HTMLElement")
public class <%= elementClassName() %> extends <%= base ? base : 'PolymerElement' %> {

    @JsOverlay public static final String TAG = "<%= name %>";
    @JsOverlay public static final String SRC = "<%= path %>";

<% _.forEach(getGettersAndSetters(properties), function(item) { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    @JsProperty public native <%= computeGenericType(item.type) %> <%= computeType(item.type) %> <%= item.getter %>();
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    @JsProperty public native <%= computeGenericType(item.type) %> void <%= item.setter %>;
<% }); %>
<% _.forEach(getMethods(properties), function(item) { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @method <%= item.name %><% if (!!item.params) _.forEach(item.params, function(param) { %>
     * @param {<%= param.type %>} <%= param.name %> <%= param.description %> <% }); %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     * <%= item.return && item.return.type ? '@return {' + returnString(item) + '}' : ''%>
     */
    public native <%= returnString(item) %> <%= item.method %>;
<% }); %>
}
