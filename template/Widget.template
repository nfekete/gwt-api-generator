<%= disclaimer() %>
package <%= ns %>.widget;

import <%= ns %>.*;
<% if (hasEvents()) _.forEach(events, function(event){ %>
import <%= event.ns %>.widget.event.<%= camelCase(event.name) %>Event;
import <%= event.ns %>.widget.event.<%= camelCase(event.name) %>EventHandler;
<% }); %>
import com.vaadin.polymer.*;
import com.vaadin.polymer.elemental.*;
import com.vaadin.polymer.PolymerWidget;
import elemental2.Array;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.core.client.JavaScriptObject;

/**
 * <%= getDescription(' ') %>
 */
public class <%= className() %> extends <%= base ? base : 'PolymerWidget' %> {
    /**
     * Default Constructor.
     */
    public <%= className() %>() {
       this("");
    }

    /**
     * Constructor used by UIBinder to create widgets with content.
     */
    public <%= className() %>(String html) {
        super(<%= elementClassName() %>.TAG, <%= elementClassName() %>.SRC, html);
    }

    /**
     * Gets a handle to the Polymer object's underlying DOM element.
     */
    public <%= elementClassName() %> getPolymerElement() {
        return (<%= elementClassName() %>) getElement();
    }

<% _.forEach(getGettersAndSetters(properties), function(item) { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public <%= computeType(item.type) %> <%= item.getter %>() {
        return getPolymerElement().<%= computeGetterWithPrefix(item) %>();
    }
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public void <%= item.setter %> {
        getPolymerElement().<%= computeSetterWithPrefix(item) %>(value);
    }
<% }); %>
<% _.forEach(getStringSetters(properties), function(item) { %>
    // Needed in UIBinder
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @attribute <%= hyphenize(item.name) %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public void <%= computeSetterWithPrefix(item) %>(String value) {
        Polymer.property(this.getPolymerElement(), "<%= item.name %>", value);
    }
<% }); %>
<% _.forEach(getMethods(properties), function(item) { var retType = returnString(item); %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @method <%= item.name %><% if (!!item.params) _.forEach(item.params, function(param) { %>
     * @param {<%= param.type %>} <%= param.name %> <%= param.description %> <% }); %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     * <%= item.return && item.return.type ? '@return {' + returnString(item) + '}' : ''%>
     */
    public <%= retType %> <%= item.method %> {
        <%= retType != 'void' ? 'return ' : ''%>getPolymerElement().<%= item.name %>(<%= paramsString(item) %>);
    }
<% }); %>
<% if (hasEvents()) _.forEach(events, function(event){ %>
    /**
     * <%= getDescription('     ', event) %>
     *
     * JavaScript Info:
     * @event <%= event.name %>
     */
    public HandlerRegistration add<%= camelCase(event.name) %>Handler(<%= camelCase(event.name) %>EventHandler handler) {
        return addDomHandler(handler, <%= camelCase(event.name) %>Event.TYPE);
    }
<% }); %>
}
